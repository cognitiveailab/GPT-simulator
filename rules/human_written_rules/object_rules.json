{
    "make-campfire": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject could be combustible. By default, a GameObject is not combustable.\n- A GameObject has a property isCombusting, indicating if the objects are currently on fire\n- A GameObject has a property combustingTimeRemaining indicating the object's remaining combustion time. By defualt, the objects don't have a combustion time. The default value is 0\n- If a GameObject is combusting, per tick, the combustingTimeRemaining decrease by 1. When it reaches -1, the object has combusted.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n==========\nObject: Device\nDescription: Abstract class for anything that can be considered a device that turns on or off (e.g. a light, a fan, a TV, etc.). It extends GameObject class.\nProperties:\n- A Device could be activated. By default, a device is not activatable\n- A Device has a property indicating if it is opened.\n\n==========\nObject: FirePit\nDescription: A Container object that is always open\nProperties:\n- A FirePit is always open\n\n==========\nObject: Match\nDescription: A match, which is a device that can be used to light things on fire.  It is single-use, and is removed from the simulation when used.\nProperties:\n- A match can be used on an object. If the object is combustible, not combusted, and not currently combusting, it will light the object up. \n- A match will be used up once it is used regardless if the object is lighted or not.\n\n==========\nObject: Wire\nDescription: A wire is an ElectricalObject.\n\nProperties:\n- A wire has a property 'is_wire' indicating if it is a wire.\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n",
    "volume": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObjec is not a container.\n- A GameObject could be moveable. By default, a GameObjec is moveable.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n==========\nObject: Box\nDescription: A box is a GameObject its volume needs to be measured\nProperties:\n- A box has a size property which indicates its length, width, and height\n\n==========\nObject: Rule\nDescription: A ruler is a GameObject that can measure the dimension of a box\nProperties\n- A rule can be used with a box.\n- When used with a box, it reads the dimensions of the box",
    "boil-water": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject has a starting temperature. By default, the starting temperature is 20 Celsius.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: Device\nDescription: Abstract class for anything that can be considered a device that turns on or off (e.g. a light, a fan, a TV, etc.). It extends GameObject class.\nProperties:\n- A Device could be activated. By default, a device is not activatable\n- A Device has a property indicating if it is opened.\n\n==========\nObject: Substance\nDescription: A substance (like water), with specific physical properties\nProperties: \n- A substance extends a GameObject.\n- A substance has a solid name when it is in the solid state.\n- A substance has a liquid name when it is in the liquid state.\n- A substance has a gas name when it is in gas state.\n- A substance has a boilingPoint. When the temperature is greater or equal to the boiling point. It will transit from liquid to gas state.\n- A substance has a meltingPoint. When the temperature is greater or equal to the meltingPoint. It will transit from solid to liquid state.\n- A substance has a tick method where per tick, it checks its temperature and changes state if needed.\n\n\n==========\nObject: Stove\nDescription: A stove is a heating device.  It holds things on its surface.  When turned on, it progressively heats things up to some temperature.\nProperties\n- The stove is not openable\n- The stove can not be moved\n- The stove can be turned on or off\n- The maximum temperature of the stove is 500 degrees Celsius\n- Per tick, the temperature increases by 25 degrees Celsius\n- If the stove is on, increase the temperature of anything on the stove, up to the maximum temperature.\n\n==========\nObject: Pot\nDescription: A pot, which is a container that can hold water to boil\nProperties\n- The pot is not openable\n- The pot is open all the time\n\n==========\nObject: Water\nDescription: Water is a substance that has a name, state, boiling point, melting point, and current temperature.\nProperties\n- The water has three states ice, water, and steam.\n- The melting point is 0.\n- The boiling point is 100.\n- The initial temperature is 20\n- Per tick, the current temperature determines the water's state. If the temperature is equal to or below the melting point, it will be ice. If the temperature is equal to or above boiling point, it will become steam. Otherwise, it will be water. \n\n==========\nObject: Sink\nDescription: A sink can fill the container in the sink with water if it is on. A sink is a device and a container.\nProperties\n- The sink is not openable\n- The sink can be turned on or off\n- Per tick, if the sink is on and there is any container in the sink without water, fill it with water. \n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n\n\n",
    "hang-painting": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not containers.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject could be used. By default, a GameObject is not usable.\n- A GameObject could be activated. By default, a GameObject is not activatable\n- A GameObject has a starting temperature. By default, the starting temperature is 20 Celsius.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n==========\nObject: Nail\nDescription: A Container object\nProperties:\n- A picture can be hung on a Nail.\n\n==========\nObject: Wall\nDescription: A Container project \nProperties:\n- A Nail can be hammered on the wall.\n- A Nail can not be taken off the wall by the agent.\n\n\n==========\nObject: Picture\nDescription: Water is a GameObject with its own temperature.\nProperties:\n- The water can not be moved.\n- The water has its own temperature\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n\n==========\nObject: Hammer\nDescription: A GameObject that can be used to put Nails on the wall.\n\n==========\nObject: Picture\nDescription: A GameObject that can be used to hang on the wall with a nail.\n\n\n\n",
    "metal-detector": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n==========\nObject: Room\nDescription: A room is a Container that connects with other rooms \nProperties:\n- A Room may connect with other rooms on four directions, north, east, south, or west. It is set by the connects property\n- A Room may contain an item that is buried in the room.\n\n==========\nObject: Item\nDescription: An Item is a GameObject that could be made of metal.\nProperties:\n- It has the property indicating if it is metal.\n\n==========\nObject: Shovel\nDescription: A shovel is a GameObject that can dig buried items\nProperties\n- A shovel has a durability property indicating the remaining times the shovel can dig before being broken. \n\n==========\nObject: MetalDetector\nDescription: A MetalDetector is a GameObject that can detect if there is a metal item buried in the room. \nProperties\n- A MetalDetector pings if there is a metal item in the room.\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n\n\n\n",
    "forge-key": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject has a starting temperature. By default, the starting temperature is 20 Celsius.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n==========\nObject: HeatSource\nDescription: A heat source, which is a container object that can heat items in it.  It holds things on its surface.  When turned on, it progressively heats things up to some temperature.\nProperties:\n- A HeatSource is closed by default\n- A HeatSource cannot be moved\n- A HeatSource has isLiquidContainer property indicating if it can hold liquid\n- A HeatSource has a maxTemperature property indicating the maximum temperature of the heat source (in degrees Celsius)\n- A HearSource has a tempIncreasePerTick property indicating how much the temperature increases per tick (in degrees Celsius)\n- Per tick, if the containing object's temperature is greater than HeatSource;s maxTemperature, the object's temperature decrease by tempIncreasePerTick. Otherwise, the contained object's temperature increases by the tempIncreasePerTick.\n\n\n==========\nObject: Mold\nDescription: A container object that is the mold of a key.\nProperties:\n- A Mold has its shape.\n- A Mold has its current temperature.\n- A Mold has isLiquidContainer property indicating if it can hold liquid\n- A Mold has a maxTemperature property indicating the maximum temperature of the heat source (in degrees Celsius)\n- A Mold has a tempIncreasePerTick property indicating how much the temperature increases per tick (in degrees Celsius)\n- Per tick, if the containing object's temperature is greater than HeatSource;s maxTemperature, the object's temperature decreases by tempIncreasePerTick. Otherwise, the contained object's temperature increases by the tempIncreasePerTick.\n\n==========\nObject: Door\nDescription: A GameObejct\nProperties:\n- A Door has a property is_locked indicating if the door is locked. By default, a door is locked\n- A Door has a property is_open indicating if the door is open. By default, a door is closed\n- A Door can be opened with a key\n\n==========\nObject: Substance\nDescription: A substance (like water), with specific physical properties\nProperties: \n- A substance extends a GameObject.\n- A substance has a solid name when it is in the solid state.\n- A substance has a liquid name when it is in the liquid state.\n- A substance has a gas name when it is in gas state.\n- A substance has a boilingPoint. When the temperature is greater or equal to the boiling point. It will transit from liquid to gas state.\n- A substance has a meltingPoint. When the temperature is greater or equal to the meltingPoint. It will transit from solid to liquid state.\n- A substance has a tick method where per tick, it checks its temperature and changes state if needed.\n\n\n\n\n\n",
    "blood-type": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not containers.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n==========\nObject: Blood\nDescription: Blood with a certain type. Blood extends a GameObject.\nProperties\n- There are two types of blood, Rh-positive and Rh-negative\n\n==========\nObject: Patient\nDescription: A patient with a specific blood type who needs blood transfusion. A patient extends a GameObject with blood_type. \nProperties\n- The patient can be given blood with a certain type\n- The patient has a specific blood type that can not be changed\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- The world cannot be opened or closed\n- The world is open\n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n",
    "use-bandage": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject could be combustible. By default, a GameObject is not combustible.\n- A GameObject has a property isCombusting, indicating if the objects are currently on fire\n- A GameObject has a property combustingTimeRemaining indicating the object's remaining combustion time. By default, the objects don't have a combustion time. The default value is 0\n- If a GameObject is combusting, per tick, the combustingTimeRemaining decreases by 1. When it reaches -1, the object has combusted.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: BandageBox\nDescription: BandageBox is a Container object that holds the bandage\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n==========\nObject: Bandage\nDescription: Bandage is a GameObject\n\n\n==========\nObject: Person\nDescription: A person is a Container that holds different body parts.\n\n\n==========\nObject: BodyPart\nDescription: A body part is a Container that in a person\nProperties:\n- A BodyPart may have a wound\n\n==========\nObject: Sticker\nDescription: A sticker is a GameObject that has a description of what it looks like\nProperties:\n- A sticker has a description property indicating what it looks like\n\n==========\nObject: Clothing\nDescription: A piece of clothing is a GameObject to cover body parts\nProperties:\n- A piece of clothing has a property indicating which body part it fits. \n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a bathroom\n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n\n\n",
    "conductivity": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: ElectricalObject\nDescription: A game object with electrical terminals.\nProperties:\n- It is an electrical object\n- By default, it is conductive \n- An ElectricalObject has two terminals. And for each terminal, it may connect to another object. \n\n\n\n==========\nObject: Battery\nDescription: A battery is an ElectricalObject\nProperties:\n- A battery has two terminals, a cathode and an anode.\n\n==========\nObject: LightBulb\nDescription: A light bulb is an ElectricalObject\nProperties:\n- It has an 'on' status indicating if it is on.\n- Per tick, a light bulb checks if it's connected with at least a battery in a conductive circuit. If it is, then a lightbulb's 'on' status becomes True.\n\n==========\nObject: Wire\nDescription: A wire is an ElectricalObject.\n\nProperties:\n- A wire has a property 'is_wire' indicating if it is a wire.\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n",
    "space-walk": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject has a starting temperature. By default, the starting temperature is 20 Celsius.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n- Per tick, all objects in a container will change its temperature closer to the Container's temperature until all object's temperature is the same as the Container's temperature. In each tick, the maximum temperature change is 5 degrees.\n\n==========\nObject: Room\nDescription: Room is a container that connected with other rooms by door\nProperties:\n- A Room could be in the outer space\n\n==========\nObject: Door\nDescription: A door is a GameObject that connects two rooms\nProperties:\n- A door can be opened.\n- A door has a property, connects, which indicates which two rooms it connects. \n\n==========\nObject: SpaceSuit\nDescription: SpaceSuit is a GameObject that can protect the agent in outer space\n- A SpaceSuit is not a container.\n- A SpaceSuit is moveable.\n\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick. \n\n=========\nObject: Agent\nDescription: The agent in the game\nProperties:\n- An agent has a flag indicating if it wears SpaceSuit\n- An agent has a flag indicating if it is dead\n- Per tick, checking if the agent is in a room that is outer space. If the agent is outer space but without SpaceSuit, the agent dies.\n\n\n\n",
    "wash-clothes": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject has a starting temperature. By default, the starting temperature is 20 Celsius.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: Device\nDescription: Abstract class for anything that can be considered a device that turns on or off (e.g. a light, a fan, a TV, etc.). It extends GameObject class.\nProperties:\n- A Device could be activated. By default, a device is not activatable\n- A Device has a property indicating if it is opened.\n\n==========\nObject: WashingMachine\nDescription: A WashingMachine is a container and a device that can bold clothes. \nProperties:\n- A Washing Machine is openable\n- A washing machine is closed by default\n- A washing machine can not be moved\n- A washing machine has a property cycleStage indicating the current stage of the washing machine's cycle,  0 = not running, 1 = washing, 2 = finished\n- A wahsing machine has a property finishedCycle indicating if the washing machine has finished washing the dishes.  Reset when it's open.\n- Per tick, when a washing machine's turned on, it washes the clothes (changes them from dirty to clean) as long as it has detergent in it.  If it doesn't have detergent in it, then it doesn't change from dirty to clean.\n\n==========\nObject: Dryer\nDescription: A dryer is a container and a device that can dry clothes. \nProperties:\n- A Dryer is openable\n- A Dryer is closed by default\n- A Dryer can not be moved\n- A Dryer has a property cycleStage indicating the current stage of the dryer's cycle,  0 = not running, 1 = drying, 2 = finished\n- A Dryer has a property finishedCycle indicating if the dryer has finished washing the dishes.  Reset when it's open.\n- Per tick, when the dryer is turned on, it dries the clothes (changes them from wet to dry)\n\n\n==========\nObject: Clothes\nDescription: Clothes is a GameObject\nProperties:\n- Clothes have a isDirty property indicating if the chothes are dirty\n- Clothes have a isWet property indicating if the chothes are wet\n\n==========\nObject: DetergentBottle\nDescription: DetergentBottle is a device for a bottle of detergent\nProperties:\n- DetergentBottle can be used on the washing machine. When used, it will add detergent to the washing machine.\n\n==========\nObject: Detergent\nDescription: Detergent is a Gameobject that can be added to the washing machine through a detergent bottle.\n\n==========\nObject: Basket\nDescription: Basket is a Container\nProperties:\n- A Basket can not be moved\n- A Basket is always open\n\n\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n\n\n",
    "mix-paint": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: Cup\nDescription: A cup is a Container for liquid\nProperties:\n- A cup has isLiquidContainer set true which indicating it is a liquid container\n\n==========\nObject: Paint\nDescription: Paint is a GameObject with color\nProperties:\n- Paint has a color\n- Paint is liquid\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.",
    "thermometer": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject has a starting temperature. By default, the starting temperature is 20 Celsius.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n==========\nObject: LiquidContainer\nDescription: A Container that can hold liquid\nProperties:\n- A LiquidContainer is always open\n- A LiquidContainer can not be closed\n\n==========\nObject: Liquid\nDescription: Liquid is a GameObject \nProperties:\n- A Liquid has a temperature property indicating the current temperature.\n\n==========\nObject: Thermometer\nDescription: A Thermometer is a GameObject \nProperties:\n- A Liquid has a temperature property indicating the current temperature.\n- When using the thermometer on an object, the temperature of the object can be read by the thermometer.\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n\n\n\n\n\n",
    "inclined-plane": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: InclinedPlane\nDescription: A Container object that can contain blocks\nProperties:\n- An InclinedPlane has a length property indicating its length.\n- An InclinedPlane has an objects property indicating the number of ticks that the object is on the InclinedPlane\n- An InclinedPlane has an acceleration property indicating the acceleration a block can have when putting on the inclined plane, reflecting the angle of the inclined plane.\n- Per tick, the number of ticks of an object on the plane increases by one.\n\n==========\nObject: StopWatch\nDescription: A game object that can record the number of ticks when it is activated \nProperties:\n- A StopWatch has a tick property indicating the number of ticks when activated. When deactivated, the tick reset\n- Per tick, the tick property increases by one.\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n\n\n",
    "clean-energy": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: Region\nDescription: A Container object that has a renewable resource and a power station.\nProperties:\n- It has a resource property indicating the kind of resource it contains.\n- There are three types of resources, sun, water, and wind.\n\n\n\n==========\nObject: PowerPlant\nDescription: A gameObject that is a power plant.\nProperties:\n- It has a running-efficiency property indicating whether the power plant is running efficiently, e.g., whether a power plant's name matches a region's resource.\n- It has a capacityKW property indicating the capacity of the power plant in KW. The actual output power is efficiency times capacity\n\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n",
    "volume-stone": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n==========\nObject: Water\nDescription: Water is a GameObject \nProperties:\n- Water is liquid\n- Water has a property volume indicating its volume\n\n==========\nObject: Sink\nDescription: A sink can fill the container in the sink with water if it is on. A sink is a device and a container.\nProperties\n- The sink is not openable\n- The sink can be turned on or off\n- Per tick, if the sink is on and there is any container in the sink without water, fill it with water. \n\n==========\nObject: MeasuringCup\nDescription: MeasuringCup is a Container that holds liquid\nProperties:\n- A MeasuringCup has a property indicating it is a water container\n- A MeasuringCup has a property volume indicating its capacity\n- A MeasuringCup has a property liquid indicating if it contains liquid currently\n- When the added liquid exceeds the capacity of the measuring cup, the extra liquid will be removed.\n\n==========\nObject: Stone\nDescription: A Stone is a GameObject that has volume\nProperties:\n- A Stone has a property volume indicating its volume",
    "bird-life-cycle": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not containers.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n==========\nObject: Bird\nDescription: A bird has three life stages: egg, young bird, and adult bird. A bird is a container object.\nProperties:\n- A bird has a stage property to indicate its life stage\n- When a bird is an egg, it has the property to describe the level of warmth of the egg.\n- When a bird is a young bird, the food property indicates the level of food it has.\n- An egg has the property of hatch.\n- A young bird has a property of grow.\n- Per tick, the warmth of an egg decreases by 1.\n- Per tick, the food for a young bird decreases by 1.\n- Per tick, an egg gains 1 point of hatch at each step, and becomes a young bird when hatch reaches 5\n- Per tick, a young bird gains 1 point of grow at each step, and becomes an adult when grow reaches 5\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n",
    "scale-weigh": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject has a starting temperature. By default, the starting temperature is 20 Celsius.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n- Per tick, all objects in a container will change its temperature closer to the Container's temperature until all object's temperature is the same as the Container's temperature. In each tick, the maximum temperature change is 5 degrees.\n\n==========\nObject: TaskObject\nDescription: TaskObject is a GameObject that can be put on the scale.\nProperties:\n- A TaskObject has a weight property indicating the weight of the object.\n\n==========\nObject: Scale\nDescription: A scale is a Container that measures the total weight of the objects on it\nProperties:\n- A scale cannot be moved \n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick. \n\n\n",
    "cooking": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: CookBook\nDescription: A cookbook is a GameObject that contains ingredients and their preparation methods.\nProperties:\n- A cookbook has a receipt that contains a dictionary of ingredients and their cutting and cooking methods.\n\n\n==========\nObject: Ingredient\nDescription: An Ingredient is a GameObject that indicates how it could be cut and cooked.\nProperties:\n- An ingredient has a cut property indicating how it is cut.\n- An ingredient has a cook property indicating how it is cooked. \n\n==========\nObject: Device\nDescription: An abstract class that extends GameObject.\nProperties:\n- A device has a moveable property indicating if the device can be moved. By default, a device can not be moved.\n- A device has a cooking method that indicates how it could be used to cook food.\n\n\n==========\nObject: Knife\nDescription: A knife can be used to cut food.\nProperties:\n- A knife can be used to cut ingredients by updating its cut property.\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n",
    "lit-lightbulb": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n==========\nObject: ElectricalObject\nDescription: A game object with electrical terminals.\nProperties:\n- It is an electrical object\n- By default, it is conductive \n- An ElectricalObject has two terminals. And for each terminal, it may connect to another object. \n\n==========\nObject: Battery\nDescription: A battery is an ElectricalObject\nProperties:\n- A battery has two terminals, a cathode and an anode.\n\n==========\nObject: LightBulb\nDescription: A light bulb is an ElectricalObject\nProperties:\n- It has an 'on' status indicating if it is on.\n- Per tick, a light bulb checks if it's connected with at least a battery in a conductive circuit. If it is, then a lightbulb 'on' status becomes True.\n\n==========\nObject: Wire\nDescription: A wire is an ElectricalObject.\n\nProperties:\n- A wire has a property 'is_wire' indicating if it is a wire.\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n\n",
    "make-ice-cubes": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject has a starting temperature. By default, the starting temperature is 20 Celsius.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: Device\nDescription: Abstract class for anything that can be considered a device that turns on or off (e.g. a light, a fan, a TV, etc.). It extends GameObject class.\nProperties:\n- A Device could be activated. By default, a device is not activatable\n- A Device has a property indicating if it is opened.\n\n==========\nObject: Substance\nDescription: A substance (like water), with specific physical properties\nProperties: \n- A substance extends a GameObject.\n- A substance has a solid name when it is in the solid state.\n- A substance has a liquid name when it is in the liquid state.\n- A substance has a gas name when it is in gas state.\n- A substance has a boilingPoint. When the temperature is greater or equal to the boiling point. It will transit from liquid to gas state.\n- A substance has a meltingPoint. When the temperature is greater or equal to the meltingPoint. It will transit from solid to liquid state.\n- A substance has a tick method where per tick, it checks its temperature and changes state if needed.\n\n\n==========\nObject: Freezer\nDescription: A freezer, which is a cooling device.  It contains things inside of it.  It's always on.  When things are inside it, it progressively cools them down to some temperature.\nProperties:\n- A freezer is both a Container and a Device\n- A freezer is openable. By default, it is closed\n- A freezer can not be moved.\n- A freezer is always on \n- A freezer cannot be deactivated.\n- A freezer has a minimum temperature of -4\n- A freezer can decrease the temperature of objects inside by 5 degrees per tick\n- Per tick, items in a freezer will decrease their temperature down to the minimum temperature.\n\n==========\nObject: IceCubeTray\nDescription: An ice cube tray, which is a container that typically holds water in a freezer to let it freeze and make ice cubes.\nProperties:\n- An ice cube tray can not be closed. It is always open\n\n==========\nObject: Pot\nDescription: A pot, is a container that can hold water to boil\nProperties\n- The pot is not openable\n- The pot is open all the time\n\n==========\nObject: Water\nDescription: Water is a substance that has a name, state, boiling point, melting point, and current temperature.\nProperties\n- The water has three states ice, water, and steam.\n- The melting point is 0.\n- The boiling point is 100.\n- The initial temperature is 20\n- Per tick, the current temperature determines the water's state. If the temperature is equal to or below the melting point, it will be ice. If the temperature is equal to or above boiling point, it will become steam. Otherwise, it will be water. \n\n==========\nObject: Sink\nDescription: A sink can fill the container in the sink with water if it is on. A sink is a device and a container.\nProperties\n- The sink is not openable\n- The sink can be turned on or off\n- Per tick, if the sink is on and there is any container in the sink without water, fill it with water. \n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n==========\nObject: Food\nDescription: a food item\nProperties:\n- Food has a name\n\n\n",
    "plant-tree": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in' \n\n==========\nObject: Hole\nDescription: a hole is a Container\nProperties:\n- A hole is a container that can not be moved.\n\n==========\nObject: WaterContainer\nDescription: WaterContainer is a Container that can hold water\nProperties:\n- A WaterContainer has a property indicating it is a water container\n\n\n==========\nObject: Water\nDescription: Water is a game object\n\nProperties:\n- Water is movable\n\n==========\nObject: Tree\nDescription: Tree is a game object\n\nProperties:\n- Tree is movable\n\n==========\nObject: Soil\nDescription: Soil is a game object\n\nProperties:\n- Soil has a wet property indicating if the soil is wet or dry\n\n==========\nObject: Tool\nDescription: Tool is a game object\n\nProperties:\n- A tool has a property type indicating what kind of tool it is.\n\n==========\nObject: Sink\nDescription: A sink can fill the container in the sink with water if it is on. A sink is a container.\nProperties\n- A sink is not openable\n- A sink can be turned on or off\n- A can not be moved\n- Per tick, if the sink is on and there is any container in the sink without water, fill it with water. \n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n\n\n\n",
    "take-photo": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject has a starting temperature. By default, the starting temperature is 20 Celsius.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: Device\nDescription: Abstract class for anything that can be considered a device that turns on or off (e.g. a light, a fan, a TV, etc.). It extends GameObject class.\nProperties:\n- A Device could be activated. By default, a device is not activatable\n- A Device has a property indicating if it is opened.\n\n\n==========\nObject: Camera\nDescription: A camera is a device. It is a manual camera, which is a device for taking photos. To make the photo more appealing, one needs to set the appropriate aperture-iso-shutter speed combination.\nProperties:\n- A camera is always on\n- A camera can be moved\n- A camera has a shutter speed dial ranging from 1/4000 to 8 seconds. The shutter speed dial has 16 stops.\n- A camera has an iso dial ranging from 64 to 6400. The iso dial has 7 stops.\n- A camera has an aperture dial ranging from f/1.4 - f/16. the aperture dial has 8 stops\n- A camera has a current shutter speed. By default, the shutter speed dial is set to a random position\n- A camera has a current iso. By default, the iso dial is set to a random position\n- A camera has a current aperture. By default, the aperture is set to a random position\n- A camera has a current focus indicating which object it is currently focused on\n- A camera has a photo indicating if a photo has been taken\n\n==========\nObject: Food\nDescription: Food is a GameObject \nProperties:\n- A food item has a property isFood. By default, it is set to True\n\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n\n\n",
    "sweep-floor": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not containers.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject could be used. By default, a GameObject is not usable.\n- A GameObject could be activated. By default, a GameObject is not activatable\n- A GameObject has a starting temperature. By default, the starting temperature is 20 Celsius.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n==========\nObject: Tool\nDescription: A GameObject for tools\nProperties:\n- A tool has a name.\n\n\n==========\nObject: dustpan\nDescription: A Container for garbage\n\n==========\nObject: broom\nDescription: A tool that can sweep garbage into the dustpan\n\n==========\nObject: broom\nDescription: A tool that can sweep garbage into the dustpan\n\n==========\nObject: mop\nDescription: A tool that can mop the floor\n\n\n==========\nObject: GarbageCan\nDescription: GarbageCan is a container that can hold garbage\nProperties:\n- The GarbageCan is not movable\n- The GarbageCan is openable\n- The GarbageCan has a property isOpen which indicates if the GarbageCan is currently open\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n\n\n\n\n\n",
    "balance-scale-heaviest": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not containers.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n==========\nObject: Box\nDescription: The box object is designed to hold the answer cube. The player needs to put the right cube in the box to win the game.\nProperties:\n- The box is a container object.\n- The box is a container which means it can hold other objects. \n- The box cannot be opened or closed\n- The box is open\n- When referring to box, the prefix to use is \"in\"\n- The box does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n==========\nObject: BalanceScale\nDescription: The BalanceScale provides functionality to compare the mass of objects placed on its left and right sides. \nProperties:\n- The BalanceScale is a container object.\n- The BalanceScale is not moveable, indicating that it is a stationary object within the game environment.\n- It has two sides, each represented as a separate Container object, which allows for objects to be placed on either side of the scale.\n- When the two sides have different weights, the heavier side will be lower than the lighter side. If two sides have equal weights, the scale is balanced.\n- The BalanceScale does not have a tick method, so there is no behavior that changes with each game tick.\n\n==========\nObject: Cube\nDescription: A cube object with weight and color.\nProperties:\n- A cube is a GameObject that can be moved.\n- A cube has weight, which is the mass of the cube, indicating how heavy it is.\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n",
    "dishwasher": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: Device\nDescription: Abstract class for anything that can be considered a device that turns on or off (e.g. a light, a fan, a TV, etc.). It extends GameObject class.\nProperties:\n- A Device could be activated. By default, a device is not activatable\n- A Device has a property indicating if it is opened.\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n==========\nObject: DishWasher\nDescription: A Dishwasher, which is a device that can hold dishes. It extends the Container and Device class. When it's turned on, it washes the dishes (changes them from dirty to clean) as long as it has soap in it.  If it doesn't have soap in it, then it doesn't change them from dirty to clean.\nProperties:\n- A DishWasher is openable\n- A DishWasher is closed by default\n- A DishWasher cannot be moved\n- A DishWasher has cycleStage where 0 means not running, 1 means washing, and 2 means finished\n- A DishWasher has a flag, finishedCycle, indicating if it has finished washing the dishes. It will reset to false once it is opened.\n- A DishWasher has a tick function where if it is opened, it is automatically turned off and reset. When the DishWasher is on, it changes cycleStage for each tick. When the Cyclestage is washing, it first checks if the DishWasher contains soap. If soap is present, it will wash all dishes in it and remove soap after washing. In the next tick, the Dishwasher will change cycleStage to finished and change the finishedCycle flag. \n\n==========\nObject: Dish\nDescription: A container object that may contain food.\nProperties:\n- A Dish has dishType, which is a string that describes the type of dish (e.g. \"plate\", \"bowl\", \"cup\", etc.)\n- A Dish has a flag, isClean indicating whether the dish is initialized as clean or dirty\n- A Dish has foodMessName indicting if it contains food. When a dish contains food, it is flagged as dirty.\n\n==========\nObject: DishSoapBottle\nDescription: DishSoapBottle is a device that squirts soap when used\nProperties:\n- When using DishSoapBottle on a dish, it will squirt soap on the dish.\n- When using DishSoapBottle on the dishwasher, it will squirt soap into the dishwasher\n\n==========\nObject: Soap\nDescription: A GameObject that is required to clean the dish\n\n==========\nObject: Food\nDescription: A GameObject that is a type of food with a name\nProperties:\n- It has a flag named isFood to indicate if it is a type of food.\n\n\n",
    "volume-container": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n==========\nObject: Water\nDescription: Water is a GameObject \nProperties:\n- Water is liquid\n- Water has a property volume indicating its volume\n\n==========\nObject: Sink\nDescription: A sink can fill the container in the sink with water if it is on. A sink is a device and a container.\nProperties\n- The sink is not openable\n- The sink can be turned on or off\n- Per tick, if the sink is on and there is any container in the sink without water, fill it with water. \n\n==========\nObject: WaterContainer\nDescription: WaterContainer is a Container that holds water\nProperties:\n- A WaterContainer has a property indicating it is a water container\n- A WaterContainer has a property volume indicating its capacity\n\n==========\nObject: GraduatedCylinder\nDescription: A Graduated Cylinder is a WaterContainer that can measure the volume of water\nProperties:\n- A graduated cylinder ran read the volume of water it contains in ml\n\n\n\n\n\n",
    "balance-scale-weigh": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not containers.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n==========\nObject: Box\nDescription: The box object is designed to hold the answer cube. The player needs to put the right cube in the box to win the game.\nProperties:\n- The box is a container which means it can hold other objects. \n- The box cannot be opened or closed\n- The box is open\n- When referring to box, the prefix to use is \"in\"\n- The box does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n==========\nObject: BalanceScale\nDescription: The BalanceScale provides functionality to compare the mass of objects placed on its left and right sides. \nProperties:\n- The BalanceScale is a container object.\n- The BalanceScale is not moveable, indicating that it is a stationary object within the game environment.\n- It has two sides, each represented as a separate Container object, which allows for objects to be placed on either side of the scale.\n- When the two sides have different weights, the heavier side will be lower than the lighter side. If two sides have equal weights, the scale is balanced.\n- The BalanceScale does not have a tick method, so there is no behavior that changes with each game tick.\n\n==========\nObject: Cube\nDescription: A cube object with weight and color.\nProperties:\n- A cube is a GameObject that can be moved.\n- A cube has weight, which is the mass of the cube, indicating how heavy it is.\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n==========\nObject: Weight\nDescription: A weighted object with a specific mass.\nProperties:\n- A weight is a GameObject that can be moved.\n- A weight has weight, which is the mass of the weight, indicating how heavy it is.\n- The weight of a weight is indicated in its name\n\n\n",
    "refrigerate-food": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject has a starting temperature. By default, the starting temperature is 20 Celsius.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n- Per tick, all objects in a container will change its temperature closer to the Container's temperature until all object's temperature is the same as the Container's temperature. In each tick, the maximum temperature change is 5 degrees.\n\n==========\nObject: Device\nDescription: Abstract class for anything that can be considered a device that turns on or off (e.g. a light, a fan, a TV, etc.). It extends GameObject class.\nProperties:\n- A Device could be activated. By default, a device is not activatable\n- A Device has a property indicating if it is opened.\n\n\n\n==========\nObject: Fridge\nDescription: A Fridge, which is a cooling device.  It contains things inside of it.  It's always on.  When things are inside it, it progressively cools them down to some temperature.\nProperties:\n- A Fridge is both a Container and a Device\n- A Fridge is openable. By default, it is closed\n- A Fridge can not be moved.\n- A Fridge is always on \n- A Fridge cannot be deactivated.\n- A Fridge has a minimum temperature of -4\n- A Fridge can decrease the temperature of objects inside by 5 degrees per tick\n- Per tick, items in a Fridge will decrease their temperature down to the minimum temperature.\n\n==========\nObject: FoodItem\nDescription: FoodItem is a GameObject\nProperties:\n- A FoodItem has its spoil time indicates how long the food item lasts before it spoils (in steps)\n- A FoodItem has the maximum temperature of the food item (in degrees Celsius).  If the food item is hotter than this, it will eventually spoil.\n- A FoodItem has the timeAboveMexTemp property where it shows H=how long the food item has been above the maximum temperature (in steps)\n- A FoodItem has the isAboveMaxTemp property indicating if the food item is above the maximum temperature\n- A FoodItem has isSpoiled indicating if the food item is spoiled\n- Per tick, it checks if the food item is above the maximum temperature. If the food item is above the maximum temperature, then increase the time it's been above the maximum temperature. If the food item has been above the maximum temperature for too long, then it spoils\n\n==========\nObject: Counter\nDescription: A Counter is a container that can be used to put things in.\nProperties:\n- A counter can not be moved.\n- A counter is always open.\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick. ",
    "multimeter": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n==========\nObject: ElectricalObject\nDescription: A game object with electrical terminals.\nProperties:\n- It is an electrical object\n- By default, it is conductive \n- An ElectricalObject has two terminals. And for each terminal, it may connect to another object. \n\n==========\nObject: Multimeter\nDescription: a multimeter is an ElectricalObjecet with three modes: voltage, current, and resistance\nProperties:\n- A Multimeter has a mode indicating what it is currently measuring\n- If a multimeter is in current mode or resistance mode, it is conductive with 0 resistance\n- If a multimeter is in voltage mode, it is not conductive with infinite resistance.\n\n==========\nObject: Wire\nDescription: A wire is an ElectricalObject.\n\nProperties:\n- A wire has a property 'is_wire' indicating if it is a wire.\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n\n",
    "bath-tub-water-temperature": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not containers.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject could be used. By default, a GameObject is not usable.\n- A GameObject could be activated. By default, a GameObject is not activatable\n- A GameObject has a starting temperature. By default, the starting temperature is 20 Celsius.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a GameObject with the container property.\n- A Container could be opened (e.g., e.g. a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n\n==========\nObject: Tap\nDescription: A tap of the bath tab. Tap is a GameObject.\nProperties:\n- The tap can be activated\n- When the tap is activated, it will be turned on\n- The tap can be turned off\n- The tap can not be moved\n- The tap can set the temperature of the water coming out from the tap\n- If the tap is on and has a parent bathtub, per tick, the tap will change the water in the tub. If there is no water in the tub, turning on the tap will add water to the tub. If the water in the bathtub is hotter than the water from the tap, decrease the temperature of the water in the bathtub. If the water in the bathtub is cooler than the water from the tap, increase the temperature of the water in the bathtub\n\n==========\nObject: Thermometer\nDescription: The thermometer can read the temperature of an object when used on the object. It is a GameObejct.\nProperties:\n- It cannot be used on the agent or the thermometer itself.\n- The thermometer can return the temperature in Celsius\n\n\n==========\nObject: Water\nDescription: Water is a GameObject with its own temperature.\nProperties:\n- The water can not be moved.\n- The water has its own temperature\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick.\n\n\n==========\nObject: BathTub\nDescription: The bathtub can hold the water from the tap. It is a container obejct.\nProperties: \n- The bathtub can not be moved.\n- The bathtub is a container.\n\n==========\n",
    "sunburn": "Object: GameObject\nDescription: Abstract class for all game objects\nProperties:\n- A GameObject could be a container. By default, a GameObject is not a container.\n- A GameObject could be moveable. By default, a GameObject is moveable.\n- A GameObject has a starting temperature. By default, the starting temperature is 20 Celsius.\n\n\n==========\nObject: Container\nDescription: Abstract class for things that can be considered 'containers' (e.g. a drawer, a box, a table, a shelf, etc.)\nProperties:\n- A Container is a container.\n- A Container could be opened (e.g., a drawer, a door, a box, etc.), or is it always 'open' (e.g. a table, a shelf, etc.). \n- A Container has a property indicating if it is opened.\n- A Container has a property indicating the prefix to use when referring to the container (e.g. \"in the drawer\", \"on the table\", etc.). By default, the prefix is 'in'\n- Per tick, all objects in a container will change its temperature closer to the Container's temperature until all object's temperature is the same as the Container's temperature. In each tick, the maximum temperature change is 5 degrees.\n\n==========\nObject: Room\nDescription: Room is a container that connected with other rooms by door\nProperties:\n- A Room could be in the outdoor\n\n==========\nObject: Door\nDescription: A door is a GameObject that connects two rooms\nProperties:\n- A door can be opened.\n- A door has a property, connects, which indicates which two rooms it connects. \n\n==========\nObject: Item\nDescription: An Item is a GameObject\n- The property 'usable' indicates if the Item is usable\n- An Item has a name\n- An Item is not a container\n- An item is movable\n\n\n==========\nObject: World\nDescription: The world is the root object of the game object tree.  In single-room environments, it's where all the objects are located.\nProperties: \n- The world is a container which means it can hold other objects. \n- When referring to the world, the prefix to use is \"in\"\n- The world does not contain a `tick` method, so there is no need to describe changes to the object properties at each game tick. \n\n=========\nObject: Agent\nDescription: The agent in the game\nProperties:\n- An agent has a flag indicating if it has sunscreen\n- An agent has a flag indicating if it has sunburn\n- Per tick, checking if the agent is in a room that is outdoors. If the agent is outdoors but without sunscreen, the agent gets sunburn.\n\n\n"
}